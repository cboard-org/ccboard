version: 2.1

orbs:
  win: circleci/windows@5.0

jobs:
  build_cboard:
    machine:
      image: ubuntu-2004:2024.01.1
    resource_class: large
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Decrypt the Google services file 
          command: |
            openssl aes-256-cbc -d -md sha256 \
            -pbkdf2 \
            -in  google-services.json.cypher \
            -out google-services.json \
            -k $KEY
      - run:
          name: Decrypt the Google services info .plist file 
          command: |
            openssl aes-256-cbc -d -md sha256 \
            -pbkdf2 \
            -in  GoogleService-info.plist.cipher \
            -out GoogleService-info.plist \
            -k $KEY
      - run: 
          name: Install node and yarn
          command: |
            sudo apt update
            sudo apt install nodejs
            node -v
            sudo apt install npm
            sudo apt install yarn
      - run: 
          name: Sync cboard module 
          command: |
            git submodule sync
            git submodule update --init
      - run:
          name: Install cboard
          command: |
            export NODE_OPTIONS=--max-old-space-size=8192
            cd cboard
            git checkout master 
            git pull
            yarn install
      - run:
          name: Replace cboard files 
          command: |
            cd cboard
            sudo sed -i 's+"homepage": "https://app.cboard.io",+"homepage": ".",+g' package.json
            sudo sed -i 's+<meta charset="utf-8">+<meta charset="utf-8"><script src="cordova.js"></script>+g' public/index.html
      - run:
          name: Build cboard
          command: |
            export NODE_OPTIONS=--max-old-space-size=8192
            cd cboard
            yarn build --verbose 
      - persist_to_workspace:
          root: cboard
          paths:
            - build/*
      - run:
          name: Generate zip file
          command: |
            cd cboard 
            zip build.zip -r build
      - store_artifacts:
          path: ./cboard/build.zip
      - store_artifacts:
          path: ./cboard/package.json
      - store_artifacts:
          path: ./cboard/public/index.html
  build_android:
    docker:
      - image: cimg/android:2022.08.1-node
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: Decrypt the Google services file 
          command: |
            openssl aes-256-cbc -d -md sha256 \
            -pbkdf2 \
            -in  google-services.json.cypher \
            -out google-services.json \
            -k $KEY
      - run:
          name: Decrypt the Google services info .plist file 
          command: |
            openssl aes-256-cbc -d -md sha256 \
            -pbkdf2 \
            -in  GoogleService-info.plist.cipher \
            -out GoogleService-info.plist \
            -k $KEY
      - run:
          name: Decrypt the keystore file 
          command: |
            openssl aes-256-cbc -d -md sha256 \
            -pbkdf2 \
            -in  ccboard.keystore.cypher \
            -out ccboard.keystore \
            -k $KEY    
      - run: 
          name: Install gradle
          command: |
            wget https://services.gradle.org/distributions/gradle-6.8.1-bin.zip -P /tmp
            sudo unzip -d /opt/gradle /tmp/gradle-*.zip
            echo 'export GRADLE_HOME=/opt/gradle/gradle-6.8.1' >> $BASH_ENV
            echo 'export PATH=$PATH:/opt/gradle/gradle-6.8.1/bin' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Install Cordova
          command: |
            sudo npm install -g cordova
            mkdir www
            mkdir /tmp/workspace
      - run:
          name: Install dependencias 
          command: |
            yarn install --cache-folder ~/.cache/yarn
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy Build
          command: |
            cp -R /tmp/workspace/build/. www
            ls -a www
      - run:
          name: Install jdk 17 
          command: |
            sudo apt-get update && sudo apt-get upgrade
            sudo apt-get install openjdk-17-jdk
      - run:
          name: Install build-tools 34.0.0
          command: |
            sdkmanager "build-tools;34.0.0"
            sdkmanager --list
      - run:
          name: Build Android 
          command: |
            export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
            export PATH=$JAVA_HOME/bin:$PATH
            sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
            cordova platform add android --noresources
            cordova build android --release --verbose
            cordova build android --verbose
            cp platforms/android/app/build/outputs/bundle/release/app-release.aab ccboard.aab
            cp platforms/android/app/build/outputs/apk/debug/app-debug.apk ccboard-debug.apk
            $ANDROID_HOME/build-tools/34.0.0/zipalign -v 4 ccboard.aab cboard.aab
            $ANDROID_HOME/build-tools/34.0.0/zipalign -v 4 ccboard-debug.apk cboard-debug.apk
            $JAVA_HOME/bin/jarsigner -verbose -storepass 'morning ' -sigalg SHA1withRSA -digestalg SHA1 -keystore ccboard.keystore cboard.aab ccboard
            $JAVA_HOME/bin/jarsigner -verbose -storepass 'morning ' -sigalg SHA1withRSA -digestalg SHA1 -keystore ccboard.keystore cboard-debug.apk ccboard
            mkdir -p /tmp/apk
            cp -r cboard.aab /tmp/apk
            cp -r cboard-debug.apk /tmp/apk
      - store_artifacts:
          path: /tmp/apk
          destination: apks
      - persist_to_workspace:
          root: /tmp
          paths:
            - apk/cboard.aab
  deploy_android_to_playstore:
    docker:
      - image: cimg/android:2022.08.1-node
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Install Python and dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            pip3 install google-api-python-client oauth2client
      - run:
          name: Create service account key file
          command: |
            echo $GOOGLE_PLAY_SERVICE_ACCOUNT_KEY | base64 -d > service-account-key.json
      - run:
          name: Upload AAB to Google Play Console
          command: |
            python3 -c "
            import json
            import sys
            from googleapiclient.discovery import build
            from oauth2client.service_account import ServiceAccountCredentials
            from googleapiclient.http import MediaFileUpload

            # Configuration
            PACKAGE_NAME = '$ANDROID_PACKAGE_NAME'
            AAB_FILE = '/tmp/apk/cboard.aab'
            SERVICE_ACCOUNT_FILE = 'service-account-key.json'
            TRACK = 'internal'  # Can be 'internal', 'alpha', 'beta', or 'production'

            # Authenticate
            credentials = ServiceAccountCredentials.from_json_keyfile_name(
                SERVICE_ACCOUNT_FILE,
                scopes=['https://www.googleapis.com/auth/androidpublisher']
            )

            service = build('androidpublisher', 'v3', credentials=credentials)

            try:
                # Start edit session
                edit_request = service.edits().insert(body={}, packageName=PACKAGE_NAME)
                result = edit_request.execute()
                edit_id = result['id']
                print(f'Created edit with id: {edit_id}')

                # Upload AAB
                media = MediaFileUpload(AAB_FILE, mimetype='application/octet-stream')
                bundle_response = service.edits().bundles().upload(
                    editId=edit_id,
                    packageName=PACKAGE_NAME,
                    media_body=media
                ).execute()

                version_code = bundle_response.get('versionCode')
                print(f'Uploaded bundle with version code: {version_code}')

                # Assign to track
                track_response = service.edits().tracks().update(
                    editId=edit_id,
                    track=TRACK,
                    packageName=PACKAGE_NAME,
                    body={
                        'track': TRACK,
                        'releases': [
                            {
                                'name': f'Release {version_code}',
                                'versionCodes': [version_code],
                                'status': 'completed'
                            }
                        ]
                    }
                ).execute()

                print(f'Release created for track: {TRACK}')

                # Commit changes
                commit_request = service.edits().commit(
                    editId=edit_id,
                    packageName=PACKAGE_NAME
                ).execute()

                print(f'Edit committed successfully!')

            except Exception as e:
                print(f'Error: {e}')
                sys.exit(1)
            "
  build_electron:
    machine:
      image: windows-server-2022-gui:current
      resource_class: windows.medium
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Node 16.20.1	
          command: |
            nvm list
            nvm install 16.20.1	
            nvm use 16.20.1	  
      - run:
          name: Verify node, npm and nvm version
          command: |
            node -v
            npm -v
            nvm version
      - run:
          name: Install cordova
          command: |
            npm install -g cordova
            mkdir www
            mkdir -p ./tmp/workspace
      - run:
          name: Install dependecies
          command: |
            npm i
      - attach_workspace:
          at: ./tmp/workspace
      - run:
          name: Copy Build
          command: |
            Copy-Item ./tmp/workspace/build/* ./www -recurse
            "{0:N2}" -f ((Get-ChildItem -path ./www -recurse | Measure-Object -property length -sum ).sum /1MB) + " MB"
            Get-ChildItem ./www
            Get-ChildItem .
      - run:
          name: Add Electron Platform
          command: |
            cordova platform add electron@3.0.0 --noresources
      - run:
          name: Build Electron App
          command: |
            cordova build electron --release 
            mkdir ./tmp/exe
            Copy-Item ./platforms/electron/build/*.exe ./tmp/exe
            cordova build electron --debug
            Get-ChildItem ./platforms/electron/build/*.exe | Rename-Item -NewName { $_.BaseName + ' - Debug' + $_.Extension}
            Copy-Item ./platforms/electron/build/*.exe ./tmp/exe
      - store_artifacts:
          path: ./tmp/exe
  build_ios:
    macos:
      xcode: "15.2.0"
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test
    working_directory: ~/repo
    steps:
      - checkout
      
workflows:
  build_cordova:
    jobs:
      - build_cboard:
          context: ccboard
          filters:
            branches:
              only: 
                - updated-pipeline
      - build_android:
          context: ccboard
          requires:
            - build_cboard
          filters:
            branches:
              only: 
                - master
      - deploy_android_to_playstore:
          context: ccboard
          requires:
            - build_android
          filters:
            branches:
              only: 
                - master
      - build_electron:
          context: ccboard
          requires:
            - build_cboard
          filters:
            branches:
              only: 
                - updated-pipeline
      - build_ios:
          context: ccboard
          requires:
            - build_cboard
          filters:
            branches:
              only: 
                - master
